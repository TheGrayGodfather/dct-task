MERN Stack Take-Home Assignment: Advanced Product Catalog System

Overview
In this take-home assignment, you are tasked with developing an advanced product catalog system using the MERN stack (MongoDB, Express.js, React.js, and Node.js). This system will feature differentiated access and functionalities for three types of users: "admin, moderator, and customer". Key features include user authentication, role-based authorization, product management with soft deletion and restoration, and a dynamic product listing with search, sort, and pagination capabilities.

Objective
Your goal is to build a secure, efficient, and user-friendly web application that demonstrates your capabilities in full-stack development, focusing on CRUD operations, authentication and authorization, and advanced database handling with soft deletion.

Functional Requirements
1. User Authentication and Authorization

Implement JWT (JSON Web Tokens) for secure authentication.
Automatically assign the "admin" role to the first registered user. Subsequent registrations default to the "customer" role.
Provide functionality for the admin to create "moderator" users.

2. User Roles and Permissions

Admin: Can create, read, update, delete (soft delete), and restore products. Has the authority to manage user roles.
Moderator: Can create, update, and read products. Products added by a moderator require admin approval before they become visible to customers.
Customer: Can only view products.

3. Product Management

Each product will have the following attributes: name, price, description, approval status, and an image.
Implement soft deletion for products, where "deleted" products are marked as inactive rather than being permanently removed.
Admins have the exclusive ability to restore products marked as inactive.
Include features for product search, sorting (e.g., by name, price), and pagination.
Technical Specifications

Backend (Node.js & Express.js):

Design RESTful APIs to handle all server-side logic.
Use MongoDB with Mongoose for the database. Include a deleted flag or similar in your product schema for soft deletion.
Implement middleware for authentication and role-based authorization checks.
For image uploads, consider using Multer.

Frontend (React.js):

Build a responsive and intuitive interface with React.js.
Implement routing with React Router for navigating between different views based on user roles.
Use Redux or Context API for global state management across components.
Enhance user experience with features like search, sort, and pagination for product listings.

Security:

Ensure secure handling of user authentication and session management.
Implement input validation and sanitization to protect against SQL injection, XSS, and other common security vulnerabilities.

Deliverables :

Source Code: Fully functional source code for both frontend and backend.

Documentation: A README file with:
Setup instructions.
Details on how to run the application.
API documentation, if applicable.
Evaluation Criteria

Functionality: The application meets all the specified requirements.
Code Quality: Clean, well-organized code following industry best practices.
Security: Application incorporates best practices for web security.
User Experience: The application is easy to use and navigate.

Submission Instructions:
Package your source code and any additional resources into a single compressed file.
Submit your assignment via the provided submission link or email by the deadline.
If you have deployed the application, include the URL in your submission.